//Description: A python 2.7 implementation of gcForest proposed in [1]. A demo implementation of gcForest library as well as some demo client scripts to demostrate how to use the code. The implementation is flexible enough for modifying the model or
//fit your own datasets. 
//Reference: [1] Z.-H. Zhou and J. Feng. Deep Forest: Towards an Alternative to Deep Neural Networks. In IJCAI-2017.  (https://arxiv.org/abs/1702.08835v2 )
//Requirements: This package is developed with Python 2.7, please make sure all the demendencies are installed, which is specified in requirements.txt
//ATTN: This package is free for academic usage. You can run it at your own risk. For other purposes, please contact Prof. Zhi-Hua Zhou(zhouzh@lamda.nju.edu.cn)
//ATTN2: This package was developed by Mr.Ji Feng(fengj@lamda.nju.edu.cn). The readme file and demo roughly explains how to use the codes. For any problem concerning the codes, please feel free to contact Mr.Feng. 

{
"dataset":{
    "train": {"type": "cifar10", "data_set": "train-small", "layout_x": "tensor"},
    "test": {"type": "cifar10", "data_set": "test-small", "layout_x": "tensor"}
},
"train":{
    "keep_model_in_mem":0,
    "random_state":0,
    "data_cache":{
        "cache_in_disk":{
            "default":1
        },
        "keep_in_mem":{
            "default":0
        },
        "cache_dir":"E:/code/gcforest/cifar10/fg-tree500-depth100-3folds/datas"
    }
},
"net":{
"outputs": ["pool1/8x8/ets", "pool1/8x8/rf", "pool1/11x11/ets", "pool1/11x11/rf", "pool1/16x16/ets", "pool1/16x16/rf"],
"layers":[
// win1/8x8
    {
        "type":"FGWinLayer",
        "name":"win1/8x8",
        "bottoms": ["X","y"],
        "tops":["win1/8x8/ets", "win1/8x8/rf"],
        "n_classes": 10,
        "estimators": [
            {"n_folds":3, "type":"ExtraTreesClassifier","n_estimators":500,"max_depth":100,"n_jobs":-1,"min_samples_leaf":10},
            {"n_folds":3, "type":"RandomForestClassifier","n_estimators":500,"max_depth":100,"n_jobs":-1,"min_samples_leaf":10}
        ],
        "stride_x": 2,
        "stride_y": 2,
        "win_x":8,
        "win_y":8
    },
// win1/11x11
    {
        "type":"FGWinLayer",
        "name":"win1/11x11",
        "bottoms": ["X","y"],
        "tops":["win1/11x11/ets", "win1/11x11/rf"],
        "n_classes": 10,
        "estimators": [
            {"n_folds":3, "type":"ExtraTreesClassifier","n_estimators":500,"max_depth":100,"n_jobs":-1,"min_samples_leaf":10},
            {"n_folds":3, "type":"RandomForestClassifier","n_estimators":500,"max_depth":100,"n_jobs":-1,"min_samples_leaf":10}
        ],
        "stride_x": 2,
        "stride_y": 2,
        "win_x":11,
        "win_y":11
    },
// win1/16x16
    {
        "type":"FGWinLayer",
        "name":"win1/16x16",
        "bottoms": ["X","y"],
        "tops":["win1/16x16/ets", "win1/16x16/rf"],
        "n_classes": 10,
        "estimators": [
            {"n_folds":3, "type":"ExtraTreesClassifier","n_estimators":500,"max_depth":100,"n_jobs":-1,"min_samples_leaf":10},
            {"n_folds":3, "type":"RandomForestClassifier","n_estimators":500,"max_depth":100,"n_jobs":-1,"min_samples_leaf":10}
        ],
        "stride_x": 2,
        "stride_y": 2,
        "win_x":16,
        "win_y":16
    },
// pool1
    {
        "type":"FGPoolLayer",
        "name":"pool1",
        "bottoms": ["win1/8x8/ets", "win1/8x8/rf", "win1/11x11/ets", "win1/11x11/rf", "win1/16x16/ets", "win1/16x16/rf"],
        "tops": ["pool1/8x8/ets", "pool1/8x8/rf", "pool1/11x11/ets", "pool1/11x11/rf", "pool1/16x16/ets", "pool1/16x16/rf"],
        "pool_method": "avg",
        "win_x":2,
        "win_y":2
    }
]

}
}

